// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ------------------
// Enum Role
// ------------------
enum Role {
  SUPERADMIN
  USER
  DOKTER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}


// ------------------
// User (Peserta / Dokter / Superadmin)
// ------------------
model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  role      Role      @default(USER)   // default role: USER
  birthDate DateTime?                  // tanggal lahir, opsional
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  progresses    UserProgress[] 

  results   Result[]
  answers   Answer[]
  payments  Payment[]
  subtestResults SubtestResult[]
}


// ------------------
// Jenis Tes
// ------------------
model TestType {
  id        Int        @id @default(autoincrement())
  name      String     @unique   // Nama tes (contoh: IST, Pauli, Wartegg)
  desc      String?
  createdAt DateTime   @default(now())
  duration  Int
  price     Int? 
  subTests  SubTest[]
  results   Result[]
  payments  Payment[]
  
  // progress  UserProgress[]  <- hapus karena UserProgress sekarang tidak ada testTypeId
  subtestResults SubtestResult[]
}

// ------------------
// Pembayaran Tes
// ------------------
model Payment {
  id          Int           @id @default(autoincrement())
  userId      Int
  testTypeId  Int
  amount      Int           // jumlah yang dibayar
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  User        User          @relation(fields: [userId], references: [id])
  TestType    TestType      @relation(fields: [testTypeId], references: [id])
}

// ------------------
// SubTest (untuk IST misal ME, SE, dst)
// Bisa dibuat default untuk test tanpa subtest
// ------------------
model SubTest {
  id         Int       @id @default(autoincrement())
  testTypeId Int
  name       String
  desc       String?
  createdAt  DateTime  @default(now())
  duration   Int?

  questions  Question[]
  TestType   TestType  @relation(fields: [testTypeId], references: [id])
  SubtestResults SubtestResult[]

  @@unique([testTypeId, name])
}


// ------------------
// Soal
// ------------------
model Question {
  id         Int       @id @default(autoincrement())
  subTestId  Int
  code       String    @unique   // identitas unik tiap soal (misal "SE-1", "ME-10", dll)
  content    String?             // isi soal, boleh kosong
  options    Json?               // pilihan jawaban (array)
  answer     String?             // kunci jawaban (boleh kosong)

  SubTest    SubTest   @relation(fields: [subTestId], references: [id])
  answers    Answer[]
}

// ------------------
// Hasil Tes
// ------------------
model Result {
  id          Int      @id @default(autoincrement())
  userId      Int
  testTypeId  Int
  totalScore  Int?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())

  User        User     @relation(fields: [userId], references: [id])
  TestType    TestType @relation(fields: [testTypeId], references: [id])

  @@unique([userId, testTypeId])
}


model SubtestResult {
  id         Int      @id @default(autoincrement())
  userId     Int
  subTestId  Int
  score      Int
  testTypeId Int
  createdAt  DateTime @default(now())
  isCompleted Boolean  @default(false)

  User     User     @relation(fields: [userId], references: [id])
  TestType TestType @relation(fields: [testTypeId], references: [id])
  SubTest  SubTest  @relation(fields: [subTestId], references: [id])

  @@unique([userId, subTestId, testTypeId])
}


// ------------------
// Jawaban Peserta
// ------------------
model Answer {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  choice     String   // jawaban user
  isCorrect  Boolean?

  User       User     @relation(fields: [userId], references: [id])
  Question   Question @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId]) // ← tambah ini
}

model NormaIst {
  id      Int    @id @default(autoincrement())
  subtest String @db.VarChar(10)
  age     Int
  rw      Int
  sw      Int
  
  @@unique([subtest, age, rw]) // composite key
  @@map("Norma_Ist") // mapping ke nama tabel di database
}
model UserProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  subtest     String   // contoh: "SE"
  currentIdx  Int      @default(0)
  startTime   DateTime
  isCompleted Boolean  @default(false)

  @@unique([userId, subtest]) // unik per user + subtest

  User User @relation(fields: [userId], references: [id])
}
