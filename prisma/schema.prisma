generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ------------------
// Enum
// ------------------
enum Role {
  SUPERADMIN
  USER
  PSIKOLOG
  PERUSAHAAN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

// ------------------
// User (Peserta / Dokter / Superadmin)
// ------------------
model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  birthDate DateTime?
  gender    Gender?
  education String?
  phone     String?
  address   String?
  profileImage String?
  tujuan      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // khusus psikolog
  lembagalayanan String? // nama lembaga psikologi

  progresses                   UserProgress[]
  results                      Result[]
  answers                      Answer[]
  payments                     Payment[]
  attempts                     TestAttempt[]
  userPackages                 UserPackage[]
  purchasedPackagesAsCompany   PackagePurchase[] @relation("CompanyPackagePurchase")
  purchasedPackagesAsUser      PackagePurchase[] @relation("UserPackagePurchase")
  validatedResults             Result[]          @relation("ValidatedResults")
  personalityResults           PersonalityResult[] // Relasi ke hasil personality
  validatedPersonalityResults  PersonalityResult[] @relation("PersonalityValidatedResults")
  companyPayments              Payment[] @relation("CompanyPayments") 
}

// ------------------
// Jenis Tes (IST, Pauli, dll.)
// ------------------
model TestType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  desc          String?
  createdAt     DateTime       @default(now())
  duration      Int
  price         Int?
  img           String?
  subTests      SubTest[]
  questions     Question[]
  results       Result[]
  payments      Payment[]
  attempts      TestAttempt[]
  packageTests  PackageTest[]
  preferenceQuestions PreferenceQuestion[]
  personalityDescriptions PersonalityDescription[] // Relasi ke deskripsi personality
  personalityResults      PersonalityResult[]    // Relasi ke hasil personality
}

// ------------------
// SubTest (ME, SE, dll. untuk IST)
// ------------------
model SubTest {
  id             Int             @id @default(autoincrement())
  testTypeId     Int
  name           String
  desc           String?
  createdAt      DateTime        @default(now())
  duration       Int?
  questions      Question[]
  TestType       TestType        @relation(fields: [testTypeId], references: [id])
  SubtestResults SubtestResult[]

  @@unique([testTypeId, name])
}

// ------------------
// Soal IST
// ------------------
model Question {
  id           Int      @id @default(autoincrement())
  subTestId    Int?
  testTypeId   Int
  code         String   @unique
  content      String? @db.Text
  options      Json?
  type         String
  answer       Json?
  answerScores Json?
  aspek        String?
  SubTest      SubTest? @relation(fields: [subTestId], references: [id])
  TestType     TestType @relation(fields: [testTypeId], references: [id])
  answers      Answer[]
}

// ------------------
// Attempt Tes (sesi user ikut 1 tes)
// ------------------
model TestAttempt {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  testTypeId         Int
  paymentId          Int?
  startedAt          DateTime            @default(now())
  finishedAt         DateTime?
  isCompleted        Boolean @default(false)
  packagePurchaseId  Int?          
  User               User                @relation(fields: [userId], references: [id])
  TestType           TestType            @relation(fields: [testTypeId], references: [id])
  Payment            Payment?            @relation(fields: [paymentId], references: [id])
  reservedAt  DateTime  @default(now())
  status      String    @default("RESERVED") // RESERVED | STARTED | FINISHED | EXPIRED
  answers            Answer[]
  subtestResults     SubtestResult[]
  results            Result[]
  personalityResults PersonalityResult[]
  PackagePurchase    PackagePurchase? @relation(fields: [packagePurchaseId], references: [id])
    progress    UserProgress[] // setiap attempt bisa punya banyak subtest progress
}

// ------------------
// Jawaban Peserta
// ------------------
model Answer {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  attemptId              Int
  questionCode           String?
  preferenceQuestionCode String?
  choice                 String
  isCorrect              Boolean?
  User                   User      @relation(fields: [userId], references: [id])
  Attempt                TestAttempt @relation(fields: [attemptId], references: [id])
  Question               Question? @relation(fields: [questionCode], references: [code])

  @@unique([attemptId, questionCode]) // unik per attempt
  @@unique([attemptId, preferenceQuestionCode])
}

// ------------------
// Hasil SubTest
// ------------------
model SubtestResult {
  id          Int       @id @default(autoincrement())
  attemptId   Int
  subTestId   Int
  rw          Int?
  sw          Int?
  kategori    String?
  createdAt   DateTime  @default(now())
  isCompleted Boolean?  @default(false)
  Attempt     TestAttempt @relation(fields: [attemptId], references: [id])
  SubTest     SubTest   @relation(fields: [subTestId], references: [id])

  @@unique([attemptId, subTestId])
}

// ------------------
// Hasil Tes Utama
// ------------------
model Result {
  id            Int      @id @default(autoincrement())
  userId        Int
  attemptId     Int
  testTypeId    Int
  totalRw       Int?
  totalSw       Int?
  swIq          Int?
  iq            Float?
  keteranganiq  String?
  dominasi      String?
  kategoriiq    String?
  jumlahbenar   Int?
  scoreiq       Int?
  keteranganiqCPMI String?
  aspekSTK         Json?
  url           String? @db.Text 
  kesimpulan    String? @db.Text
  ttd           String? @db.Text
  summaryTemplateId Int?

  // jumlah jawaban
  jumlahA       Int?
  jumlahB       Int?
  jumlahAkor    Int?
  jumlahBkor    Int?

  // hasil per subskala
  Ds            Int?
  Mi            Int?
  Au            Int?
  Co            Int?
  Bu            Int?
  Dv            Int?
  Ba            Int?
  E             Int?

  // totalskala
  totalSkalaTO  Int?
  totalSkalaRO  Int?
  totalSkalaE   Int?
  totalSkalaO   Int?

  // konversi ke norma / SW / IQ
  konversiTO    Float?
  konversiRO    Float?
  konversiE     Float?
  konversiO     Float?

  // hasil per subskala (OK / Tidak OK)
  hasilDS       String?
  hasilMI       String?
  hasilAU       String?
  hasilCO       String?
  hasilBU       String?
  hasilDV       String?
  hasilBA       String?
  hasilE        String?

  // Validasi psikolog
  barcode       String? @unique @db.VarChar(30)
  validated     Boolean  @default(false)
  validatedById Int?
  validatedAt   DateTime?
  expiresAt     DateTime?
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id])
  Attempt       TestAttempt @relation(fields: [attemptId], references: [id])
  TestType      TestType @relation(fields: [testTypeId], references: [id])
  ValidatedBy   User?    @relation("ValidatedResults", fields: [validatedById], references: [id])
  summaryTemplate   SummaryTemplate? @relation(fields: [summaryTemplateId], references: [id])

  @@unique([attemptId, testTypeId])
}

model SummaryTemplate {
  id         Int      @id @default(autoincrement())
  testTypeId Int
  minScore   Int?
  maxScore   Int?
  template   String  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  results Result[]
}

model NormaResult {
  id  Int @id @default(autoincrement())
  age Int
  rw  Int
  sw  Int

  @@map("Norma_Result")
}

model NormaIq {
  id Int   @id @default(autoincrement())
  sw Int
  iq Float

  @@map("Norma_Iq")
}

// ------------------
// Pembayaran Tes
// ------------------
model Payment {
  id         Int           @id @default(autoincrement())
  userId     Int?
  testTypeId Int
  amount     Int
  quantity   Int           @default(1)
  companyId  Int?
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  User       User?         @relation(fields: [userId], references: [id])
  TestType   TestType      @relation(fields: [testTypeId], references: [id])
  attempts   TestAttempt[]
  company    User?         @relation("CompanyPayments", fields: [companyId], references: [id])
}

// ------------------
// Norma IST
// ------------------
model NormaIst {
  id      Int    @id @default(autoincrement())
  subtest String @db.VarChar(10)
  age     Int
  rw      Int
  sw      Float

  @@unique([subtest, age, rw])
  @@map("Norma_Ist")
}

// ------------------
// Progress Pengerjaan User
// ------------------
model UserProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  attemptId   Int?       // ⚡ baru, mengikat progress ke attempt
  subtest     String
  currentIdx  Int      @default(0)
  startTime   DateTime
  isCompleted Boolean  @default(false)
  User        User     @relation(fields: [userId], references: [id])
  TestAttempt TestAttempt? @relation(fields: [attemptId], references: [id])

  @@unique([userId, subtest, attemptId]) // ⚡ kombinasi unik baru
}


// ------------------
// Soal tes kepribadian/preferensi
// ------------------
model PreferenceQuestion {
  id         Int    @id @default(autoincrement())
  testTypeId Int
  code       String @unique
  dimension  String?
  content    String
  options    Json
  TestType   TestType @relation(fields: [testTypeId], references: [id])
}

// ------------------
// Hasil Tes Personality
// ------------------
model PersonalityResult {
  id         Int       @id @default(autoincrement())
  userId     Int
  testTypeId Int
  attemptId  Int       @unique
  resultType String
  summary    String    @db.Text
  scores     Json
  url        String?   @db.Text 
  kesimpulan String?   @db.Text
  ttd        String?   @db.Text
  personalityDescriptionId Int?
  editDescription String? @db.Text
  editSuggestion  String? @db.Text
  editProfession  String? @db.Text

  // validasi psikolog
  barcode    String? @unique @db.VarChar(30)
  validated  Boolean  @default(false)
  validatedById Int?
  validatedAt DateTime?
  expiresAt  DateTime?
  isCompleted Boolean  @default(false)
  createdAt  DateTime @default(now())

  User         User        @relation(fields: [userId], references: [id])
  TestType     TestType    @relation(fields: [testTypeId], references: [id])
  Attempt      TestAttempt @relation(fields: [attemptId], references: [id])
  ValidatedBy User? @relation("PersonalityValidatedResults", fields: [validatedById], references: [id])
  PersonalityDescription PersonalityDescription? @relation(fields: [personalityDescriptionId], references: [id])
}

model Package {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  img         String?
  tests       PackageTest[]
  purchases   PackagePurchase[]
}

model PackageTest {
  id         Int    @id @default(autoincrement())
  packageId  Int
  testTypeId Int
  package    Package  @relation(fields: [packageId], references: [id])
  testType   TestType @relation(fields: [testTypeId], references: [id])
}

model PackagePurchase {
  id           Int           @id @default(autoincrement())
  companyId    Int?
  userId       Int?
  packageId    Int
  quantity     Int           @default(1)
  purchasedAt  DateTime      @default(now())
  company      User?         @relation("CompanyPackagePurchase", fields: [companyId], references: [id])
  user         User?         @relation("UserPackagePurchase", fields: [userId], references: [id])
  package      Package       @relation(fields: [packageId], references: [id])
  userPackages UserPackage[]
  attempts     TestAttempt[]
}

model UserPackage {
  id                Int             @id @default(autoincrement())
  userId            Int
  packagePurchaseId Int
  User              User            @relation(fields: [userId], references: [id])
  PackagePurchase   PackagePurchase @relation(fields: [packagePurchaseId], references: [id])

  @@unique([userId, packagePurchaseId])
}

// ------------------
// DESKRIPSI HASIL PERSONALITY
// ------------------
model PersonalityDescription {
  id          Int      @id @default(autoincrement())
  testTypeId  Int
  type        String
  description String   @db.Text
  suggestions String   @db.Text
  professions String   @db.Text

  TestType    TestType @relation(fields: [testTypeId], references: [id])
  PersonalityResults PersonalityResult[]

  @@unique([testTypeId, type])
}
